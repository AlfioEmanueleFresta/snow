var searchIndex = {};
searchIndex["snow"] = {"doc":"The `snow` crate is a straightforward, Hard To Fuck Upâ„¢ Noise Protocol implementation.","items":[[3,"DefaultResolver","snow","The default pure-rust crypto implementation resolver.",null,null],[3,"NoiseBuilder","","Generates a `NoiseSession` and also validate that all the prerequisites for the given parameters are satisfied.",null,null],[4,"SnowError","","",null,null],[13,"Init","","",0,null],[12,"reason","snow::SnowError","",0,null],[13,"Prereq","snow","",0,null],[12,"reason","snow::SnowError","",0,null],[13,"State","snow","",0,null],[12,"reason","snow::SnowError","",0,null],[13,"Input","snow","",0,null],[13,"Decrypt","","",0,null],[4,"InitStage","","The various stages of initialization used to help identify the specific cause of an `Init` error.",null,null],[13,"ValidateKeyLengths","","",1,null],[13,"ValidatePskLengths","","",1,null],[13,"ValidateCipherTypes","","",1,null],[13,"GetRngImpl","","",1,null],[13,"GetDhImpl","","",1,null],[13,"GetCipherImpl","","",1,null],[13,"GetHashImpl","","",1,null],[13,"ValidatePskPosition","","",1,null],[4,"Prerequisite","","A prerequisite that may be missing.",null,null],[13,"LocalPrivateKey","","",2,null],[13,"RemotePublicKey","","",2,null],[4,"StateProblem","","Specific errors in the state machine.",null,null],[13,"MissingKeyMaterial","","",3,null],[13,"MissingPsk","","",3,null],[13,"NotTurnToWrite","","",3,null],[13,"NotTurnToRead","","",3,null],[13,"HandshakeNotFinished","","",3,null],[13,"HandshakeAlreadyFinished","","",3,null],[13,"OneWay","","",3,null],[4,"Session","","A state machine for the entire Noise session.",null,null],[13,"Handshake","","",4,null],[13,"Transport","","",4,null],[11,"cause","","",0,{"i":[{"n":"self"}],"o":{"g":["fail"],"n":"option"}}],[11,"backtrace","","",0,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"resolve_rng","","",5,{"i":[{"n":"self"}],"o":{"g":["box"],"n":"option"}}],[11,"resolve_dh","","",5,{"i":[{"n":"self"},{"n":"dhchoice"}],"o":{"g":["box"],"n":"option"}}],[11,"resolve_hash","","",5,{"i":[{"n":"self"},{"n":"hashchoice"}],"o":{"g":["box"],"n":"option"}}],[11,"resolve_cipher","","",5,{"i":[{"n":"self"},{"n":"cipherchoice"}],"o":{"g":["box"],"n":"option"}}],[11,"new","","Create a NoiseBuilder with the default crypto resolver.",6,{"i":[{"n":"noiseparams"}],"o":{"n":"self"}}],[11,"with_resolver","","Create a NoiseBuilder with a custom crypto resolver.",6,{"i":[{"n":"noiseparams"},{"g":["cryptoresolver"],"n":"box"}],"o":{"n":"self"}}],[11,"psk","","Specify a PSK (only used with `NoisePSK` base parameter)",6,null],[11,"local_private_key","","Your static private key, can be generated by `generate_private_key()`.",6,null],[11,"prologue","","Arbitrary data to be hashed in to the handshake hash value.",6,null],[11,"remote_public_key","","The responder's static public key.",6,null],[11,"generate_private_key","","Generate a new private key. It's up to the user of this library how to store this.",6,{"i":[{"n":"self"}],"o":{"g":["vec","error"],"n":"result"}}],[11,"build_initiator","","Build a NoiseSession for the side who will initiate the handshake (send the first message)",6,{"i":[{"n":"self"}],"o":{"g":["session","error"],"n":"result"}}],[11,"build_responder","","Build a NoiseSession for the side who will be responder (receive the first message)",6,{"i":[{"n":"self"}],"o":{"g":["session","error"],"n":"result"}}],[11,"is_payload_encrypted","","If the payload will be encrypted or not. In a future version of Snow, this interface may change to more proactively prevent unauthenticated, plaintext payloads during handshakes.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_handshake_finished","","True if the handshake is finished and the Session state machine is ready to be transitioned to transport mode. This function also returns a vacuous true if already in transport mode.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_initiator","","",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"write_message","","Construct a message from `payload` (and pending handshake tokens if in handshake state), and writes it to the `output` buffer.",4,null],[11,"read_message","","Reads a noise message from `input`",4,null],[11,"rekey","","Set a new key for the one or both of the initiator-egress and responder-egress symmetric ciphers.",4,{"i":[{"n":"self"},{"n":"option"},{"n":"option"}],"o":{"g":["error"],"n":"result"}}],[11,"receiving_nonce","","Get the forthcoming inbound nonce value.",4,{"i":[{"n":"self"}],"o":{"g":["u64","error"],"n":"result"}}],[11,"sending_nonce","","Get the forthcoming outbound nonce value.",4,{"i":[{"n":"self"}],"o":{"g":["u64","error"],"n":"result"}}],[11,"get_remote_static","","Get the remote static key that was possibly encrypted in the first payload.",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"set_receiving_nonce","","Set the forthcoming incoming nonce value.",4,{"i":[{"n":"self"},{"n":"u64"}],"o":{"g":["error"],"n":"result"}}],[11,"set_psk","","Set the preshared key at the specified location. It is up to the caller to correctly set the location based on the specified handshake - Snow won't stop you from placing a PSK in an unused slot.",4,null],[11,"into_transport_mode","","Transition the session into transport mode. This can only be done once the handshake has finished.",4,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[0,"params","","All structures related to Noise parameter definitions (cryptographic primitive choices, protocol patterns/names)",null,null],[3,"HandshakeModifierList","snow::params","",null,null],[12,"list","","",7,null],[3,"HandshakeChoice","","",null,null],[12,"pattern","","",8,null],[12,"modifiers","","",8,null],[3,"HandshakeTokens","","The defined token patterns for a given handshake.",null,null],[12,"premsg_pattern_i","","",9,null],[12,"premsg_pattern_r","","",9,null],[12,"msg_patterns","","",9,null],[3,"NoiseParams","","The set of choices (as specified in the Noise spec) that constitute a full protocol definition.",null,null],[12,"name","","",10,null],[12,"base","","",10,null],[12,"handshake","","",10,null],[12,"dh","","",10,null],[12,"cipher","","",10,null],[12,"hash","","",10,null],[4,"Token","","The tokens which describe message patterns.",null,null],[13,"E","","",11,null],[13,"S","","",11,null],[13,"Dhee","","",11,null],[13,"Dhes","","",11,null],[13,"Dhse","","",11,null],[13,"Dhss","","",11,null],[13,"Psk","","",11,null],[4,"HandshakePattern","","One of the patterns as defined in the Handshake Pattern section",null,null],[13,"N","","",12,null],[13,"X","","",12,null],[13,"K","","",12,null],[13,"NN","","",12,null],[13,"NK","","",12,null],[13,"NX","","",12,null],[13,"XN","","",12,null],[13,"XK","","",12,null],[13,"XX","","",12,null],[13,"KN","","",12,null],[13,"KK","","",12,null],[13,"KX","","",12,null],[13,"IN","","",12,null],[13,"IK","","",12,null],[13,"IX","","",12,null],[4,"HandshakeModifier","","",null,null],[13,"Psk","","",13,null],[13,"Fallback","","",13,null],[4,"BaseChoice","","I recommend you choose `Noise`.",null,null],[13,"Noise","","",14,null],[4,"DHChoice","","One of `25519` or `448`, per the spec.",null,null],[13,"Curve25519","","",15,null],[13,"Ed448","","",15,null],[4,"CipherChoice","","One of `ChaChaPoly` or `AESGCM`, per the spec.",null,null],[13,"ChaChaPoly","","",16,null],[13,"AESGCM","","",16,null],[4,"HashChoice","","One of the supported SHA-family or BLAKE-family hash choices, per the spec.",null,null],[13,"SHA256","","",17,null],[13,"SHA512","","",17,null],[13,"Blake2s","","",17,null],[13,"Blake2b","","",17,null],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"token"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"bool"}}],[11,"ne","","",11,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"bool"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"handshakepattern"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"handshakepattern"}],"o":{"n":"bool"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"is_oneway","","If the protocol is one-way only",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"needs_local_static_key","","Whether this pattern requires a long-term static key.",12,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"bool"}}],[11,"need_known_remote_pubkey","","Whether this pattern demands a remote public key pre-message.",12,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"bool"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"handshakemodifier"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"handshakemodifier"}],"o":{"n":"bool"}}],[11,"ne","","",13,{"i":[{"n":"self"},{"n":"handshakemodifier"}],"o":{"n":"bool"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",13,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"handshakemodifierlist"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"handshakemodifierlist"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"handshakemodifierlist"}],"o":{"n":"bool"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",7,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"handshakechoice"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"handshakechoice"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"handshakechoice"}],"o":{"n":"bool"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"is_psk","","",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_fallback","","",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from_str","","",8,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"from_str","","",12,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"as_str","","",12,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"try_from","","",9,{"i":[{"n":"handshakechoice"}],"o":{"n":"result"}}],[6,"MessagePatterns","","",null,null],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"basechoice"}],"o":{"n":"bool"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"basechoice"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",14,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"dhchoice"}],"o":{"n":"bool"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"dhchoice"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",15,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"cipherchoice"}],"o":{"n":"bool"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"cipherchoice"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",16,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"hashchoice"}],"o":{"n":"bool"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"hashchoice"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",17,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"noiseparams"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"noiseparams"}],"o":{"n":"bool"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"noiseparams"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new NoiseParams via specifying enums directly.",10,{"i":[{"n":"string"},{"n":"basechoice"},{"n":"handshakechoice"},{"n":"dhchoice"},{"n":"cipherchoice"},{"n":"hashchoice"}],"o":{"n":"self"}}],[11,"from_str","","",10,{"i":[{"n":"str"}],"o":{"n":"result"}}],[0,"types","snow","The traits for cryptographic implementations that can be used by Noise.",null,null],[8,"Random","snow::types","Provides randomness",null,null],[10,"fill_bytes","","",18,null],[8,"Dh","","Provides Diffie-Hellman operations",null,null],[10,"name","","",19,{"i":[{"n":"self"}],"o":{"n":"str"}}],[10,"pub_len","","",19,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"priv_len","","",19,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"set","","",19,null],[10,"generate","","",19,{"i":[{"n":"self"},{"n":"random"}]}],[10,"pubkey","","",19,null],[10,"privkey","","",19,null],[10,"dh","","",19,null],[8,"Cipher","","Provides cipher operations",null,null],[10,"name","","",20,{"i":[{"n":"self"}],"o":{"n":"str"}}],[10,"set","","",20,null],[10,"encrypt","","",20,null],[10,"decrypt","","",20,null],[8,"Hash","","Provides hashing operations",null,null],[10,"name","","",21,{"i":[{"n":"self"}],"o":{"n":"str"}}],[10,"block_len","","",21,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"hash_len","","",21,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"reset","","",21,{"i":[{"n":"self"}]}],[10,"input","","",21,null],[10,"result","","",21,null],[11,"hmac","","",21,null],[11,"hkdf","","",21,null],[0,"wrappers","snow","The wrappers around the default collection of cryptography and entropy providers.",null,null],[0,"crypto_wrapper","snow::wrappers","",null,null],[3,"Dh25519","snow::wrappers::crypto_wrapper","",null,null],[3,"CipherAESGCM","","",null,null],[3,"CipherChaChaPoly","","",null,null],[3,"HashSHA256","","",null,null],[3,"HashSHA512","","",null,null],[3,"HashBLAKE2b","","",null,null],[3,"HashBLAKE2s","","",null,null],[11,"default","","",22,{"o":{"n":"dh25519"}}],[11,"default","","",23,{"o":{"n":"cipheraesgcm"}}],[11,"default","","",24,{"o":{"n":"cipherchachapoly"}}],[11,"name","","",22,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"pub_len","","",22,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"priv_len","","",22,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"set","","",22,null],[11,"generate","","",22,{"i":[{"n":"self"},{"n":"random"}]}],[11,"pubkey","","",22,null],[11,"privkey","","",22,null],[11,"dh","","",22,null],[11,"name","","",23,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"set","","",23,null],[11,"encrypt","","",23,null],[11,"decrypt","","",23,null],[11,"name","","",24,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"set","","",24,null],[11,"encrypt","","",24,null],[11,"decrypt","","",24,null],[11,"default","","",25,{"o":{"n":"hashsha256"}}],[11,"block_len","","",25,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"hash_len","","",25,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"name","","",25,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"reset","","",25,{"i":[{"n":"self"}]}],[11,"input","","",25,null],[11,"result","","",25,null],[11,"default","","",26,{"o":{"n":"hashsha512"}}],[11,"name","","",26,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"block_len","","",26,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"hash_len","","",26,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"reset","","",26,{"i":[{"n":"self"}]}],[11,"input","","",26,null],[11,"result","","",26,null],[11,"default","","",27,{"o":{"n":"hashblake2b"}}],[11,"name","","",27,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"block_len","","",27,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"hash_len","","",27,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"reset","","",27,{"i":[{"n":"self"}]}],[11,"input","","",27,null],[11,"result","","",27,null],[11,"default","","",28,{"o":{"n":"hashblake2s"}}],[11,"name","","",28,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"block_len","","",28,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"hash_len","","",28,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"reset","","",28,{"i":[{"n":"self"}]}],[11,"input","","",28,null],[11,"result","","",28,null],[0,"rand_wrapper","snow::wrappers","",null,null],[3,"RandomOs","snow::wrappers::rand_wrapper","",null,null],[11,"default","","",29,{"o":{"n":"randomos"}}],[11,"fill_bytes","","",29,null],[0,"hacl_wrapper","snow::wrappers","",null,null],[3,"HaclStarResolver","snow::wrappers::hacl_wrapper","",null,null],[3,"Dh25519","","",null,null],[3,"CipherChaChaPoly","","",null,null],[3,"HashSHA256","","",null,null],[3,"HashSHA512","","",null,null],[11,"new","","",30,{"o":{"n":"self"}}],[11,"resolve_rng","","",30,{"i":[{"n":"self"}],"o":{"g":["box"],"n":"option"}}],[11,"resolve_dh","","",30,{"i":[{"n":"self"},{"n":"dhchoice"}],"o":{"g":["box"],"n":"option"}}],[11,"resolve_hash","","",30,{"i":[{"n":"self"},{"n":"hashchoice"}],"o":{"g":["box"],"n":"option"}}],[11,"resolve_cipher","","",30,{"i":[{"n":"self"},{"n":"cipherchoice"}],"o":{"g":["box"],"n":"option"}}],[11,"default","","",31,{"o":{"n":"dh25519"}}],[11,"default","","",32,{"o":{"n":"cipherchachapoly"}}],[11,"default","","",33,{"o":{"n":"hashsha256"}}],[11,"default","","",34,{"o":{"n":"hashsha512"}}],[11,"name","","",31,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"pub_len","","",31,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"priv_len","","",31,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"set","","",31,null],[11,"generate","","",31,{"i":[{"n":"self"},{"n":"random"}]}],[11,"pubkey","","",31,null],[11,"privkey","","",31,null],[11,"dh","","",31,null],[11,"name","","",32,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"set","","",32,null],[11,"encrypt","","",32,null],[11,"decrypt","","",32,null],[11,"block_len","","",33,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"hash_len","","",33,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"name","","",33,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"reset","","",33,{"i":[{"n":"self"}]}],[11,"input","","",33,null],[11,"result","","",33,null],[11,"name","","",34,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"block_len","","",34,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"hash_len","","",34,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"reset","","",34,{"i":[{"n":"self"}]}],[11,"input","","",34,null],[11,"result","","",34,null],[0,"ring_wrapper","snow::wrappers","",null,null],[3,"RingAcceleratedResolver","snow::wrappers::ring_wrapper","",null,null],[3,"CipherAESGCM","","",null,null],[3,"CipherChaChaPoly","","",null,null],[3,"HashSHA256","","",null,null],[3,"HashSHA512","","",null,null],[11,"new","","",35,{"o":{"n":"self"}}],[11,"resolve_rng","","",35,{"i":[{"n":"self"}],"o":{"g":["box"],"n":"option"}}],[11,"resolve_dh","","",35,{"i":[{"n":"self"},{"n":"dhchoice"}],"o":{"g":["box"],"n":"option"}}],[11,"resolve_hash","","",35,{"i":[{"n":"self"},{"n":"hashchoice"}],"o":{"g":["box"],"n":"option"}}],[11,"resolve_cipher","","",35,{"i":[{"n":"self"},{"n":"cipherchoice"}],"o":{"g":["box"],"n":"option"}}],[11,"default","","",36,{"o":{"n":"self"}}],[11,"name","","",36,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"set","","",36,null],[11,"encrypt","","",36,null],[11,"decrypt","","",36,null],[11,"default","","",37,{"o":{"n":"self"}}],[11,"name","","",37,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"set","","",37,null],[11,"encrypt","","",37,null],[11,"decrypt","","",37,null],[11,"default","","",38,{"o":{"n":"self"}}],[11,"name","","",38,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"block_len","","",38,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"hash_len","","",38,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"reset","","",38,{"i":[{"n":"self"}]}],[11,"input","","",38,null],[11,"result","","",38,null],[11,"default","","",39,{"o":{"n":"self"}}],[11,"name","","",39,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"block_len","","",39,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"hash_len","","",39,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"reset","","",39,{"i":[{"n":"self"}]}],[11,"input","","",39,null],[11,"result","","",39,null],[8,"CryptoResolver","snow","An object that resolves the providers of Noise crypto choices",null,null],[10,"resolve_rng","","",40,{"i":[{"n":"self"}],"o":{"g":["box"],"n":"option"}}],[10,"resolve_dh","","",40,{"i":[{"n":"self"},{"n":"dhchoice"}],"o":{"g":["box"],"n":"option"}}],[10,"resolve_hash","","",40,{"i":[{"n":"self"},{"n":"hashchoice"}],"o":{"g":["box"],"n":"option"}}],[10,"resolve_cipher","","",40,{"i":[{"n":"self"},{"n":"cipherchoice"}],"o":{"g":["box"],"n":"option"}}]],"paths":[[4,"SnowError"],[4,"InitStage"],[4,"Prerequisite"],[4,"StateProblem"],[4,"Session"],[3,"DefaultResolver"],[3,"NoiseBuilder"],[3,"HandshakeModifierList"],[3,"HandshakeChoice"],[3,"HandshakeTokens"],[3,"NoiseParams"],[4,"Token"],[4,"HandshakePattern"],[4,"HandshakeModifier"],[4,"BaseChoice"],[4,"DHChoice"],[4,"CipherChoice"],[4,"HashChoice"],[8,"Random"],[8,"Dh"],[8,"Cipher"],[8,"Hash"],[3,"Dh25519"],[3,"CipherAESGCM"],[3,"CipherChaChaPoly"],[3,"HashSHA256"],[3,"HashSHA512"],[3,"HashBLAKE2b"],[3,"HashBLAKE2s"],[3,"RandomOs"],[3,"HaclStarResolver"],[3,"Dh25519"],[3,"CipherChaChaPoly"],[3,"HashSHA256"],[3,"HashSHA512"],[3,"RingAcceleratedResolver"],[3,"CipherAESGCM"],[3,"CipherChaChaPoly"],[3,"HashSHA256"],[3,"HashSHA512"],[8,"CryptoResolver"]]};
initSearch(searchIndex);
